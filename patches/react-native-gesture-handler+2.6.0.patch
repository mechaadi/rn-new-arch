diff --git a/node_modules/react-native-gesture-handler/android/build.gradle b/node_modules/react-native-gesture-handler/android/build.gradle
index d707c55..15dc5ec 100644
--- a/node_modules/react-native-gesture-handler/android/build.gradle
+++ b/node_modules/react-native-gesture-handler/android/build.gradle
@@ -18,15 +18,15 @@ def isNewArchitectureEnabled() {
     // - Set `newArchEnabled` to true inside the `gradle.properties` file
     // - Invoke gradle with `-newArchEnabled=true`
     // - Set an environment variable `ORG_GRADLE_PROJECT_newArchEnabled=true`
-    return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
+    return project.hasProperty('newArchEnabled') && project.newArchEnabled == 'true'
 }
 
-static def findNodeModulePath(baseDir, packageName) {
+def findNodeModulePath(baseDir, packageName) {
     def basePath = baseDir.toPath().normalize()
     // Node's module resolution algorithm searches up to the root directory,
     // after which the base path will be null
     while (basePath) {
-        def candidatePath = Paths.get(basePath.toString(), "node_modules", packageName)
+        def candidatePath = Paths.get(basePath.toString(), 'node_modules', packageName)
         if (candidatePath.toFile().exists()) {
             return candidatePath.toString()
         }
@@ -35,13 +35,6 @@ static def findNodeModulePath(baseDir, packageName) {
     return null
 }
 
-def findNodeModulePath(packageName) {
-    // Don't start in the project dir, as its path ends with node_modules/react-native-gesture-handler/android
-    // we want to go two levels up, so we end up in the first_node modules and eventually
-    // search upwards if the package is not found there
-    return findNodeModulePath(projectDir.toPath().parent.parent.toFile(), packageName)
-}
-
 if (isNewArchitectureEnabled()) {
     apply plugin: 'com.facebook.react'
 }
@@ -67,42 +60,8 @@ def shouldUseCommonInterfaceFromReanimated() {
 }
 
 def reactNativeArchitectures() {
-    def value = project.getProperties().get("reactNativeArchitectures")
-    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
-}
-
-def shouldAssertNoMultipleInstances() {
-  if (rootProject.hasProperty("disableMultipleInstancesCheck")) {
-    return rootProject.property("disableMultipleInstancesCheck") != "true"
-  } else {
-    return true
-  }
-}
-
-def noMultipleInstancesAssertion() {
-    Set<File> files = fileTree(rootDir.parent) {
-        include "node_modules/**/react-native-gesture-handler/package.json"
-        exclude "**/.yarn/**"
-    }.files
-
-    if (files.size() > 1) {
-        String parsedLocation = files.stream().map({ File file -> "- " + file.toString().replace("/package.json", "") }).collect().join("\n")
-        String exceptionMessage = "\n[Gesture Handler] Multiple instances of Gesture Handler were detected. Only one instance of react-native-gesture-handler can be installed in a project. You need to resolve the conflict manually. Check out the documentation: https://docs.swmansion.com/react-native-gesture-handler/docs/troubleshooting#multiple-instances-of-gesture-handler-were-detected \n\nConflict between: \n" + parsedLocation + "\n";
-        throw new Exception(exceptionMessage);
-    }
-}
-
-def REACT_NATIVE_DIR = findNodeModulePath("react-native")
-
-def assertionTask = task assertNoMultipleInstances {
-    onlyIf { shouldAssertNoMultipleInstances() }
-    doFirst {
-        noMultipleInstancesAssertion()
-    }
-}
-
-tasks.preBuild {
-    dependsOn assertionTask
+    def value = project.getProperties().get('reactNativeArchitectures')
+    return value ? value.split(',') : ['armeabi-v7a', 'x86', 'x86_64', 'arm64-v8a']
 }
 
 repositories {
@@ -110,14 +69,14 @@ repositories {
 }
 
 android {
-    compileSdkVersion safeExtGet("compileSdkVersion", 28)
+    compileSdkVersion safeExtGet('compileSdkVersion', 28)
 
     // Used to override the NDK path/version on internal CI or by allowing
     // users to customize the NDK path/version from their root project (e.g. for M1 support)
-    if (rootProject.hasProperty("ndkPath")) {
+    if (rootProject.hasProperty('ndkPath')) {
         ndkPath rootProject.ext.ndkPath
     }
-    if (rootProject.hasProperty("ndkVersion")) {
+    if (rootProject.hasProperty('ndkVersion')) {
         ndkVersion rootProject.ext.ndkVersion
     }
 
@@ -125,20 +84,29 @@ android {
         minSdkVersion safeExtGet('minSdkVersion', 16)
         targetSdkVersion safeExtGet('targetSdkVersion', 28)
         versionCode 1
-        versionName "1.0"
-        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
+        versionName '1.0'
+        buildConfigField 'boolean', 'IS_NEW_ARCHITECTURE_ENABLED', isNewArchitectureEnabled().toString()
         if (isNewArchitectureEnabled()) {
-            var appProject = rootProject.allprojects.find {it.plugins.hasPlugin('com.android.application')}
+            var appProject = rootProject.allprojects.find { it.plugins.hasPlugin('com.android.application') }
             externalNativeBuild {
-                cmake {
-                    cppFlags "-O2 -frtti -fexceptions -Wall -Wno-unused-variable -fstack-protector-all"
-                    arguments "-DAPP_BUILD_DIR=${appProject.buildDir}",
-                        "-DREACT_NATIVE_DIR=${REACT_NATIVE_DIR}",
-                        "-DANDROID_STL=c++_shared"
-                    abiFilters (*reactNativeArchitectures())
+                ndkBuild {
+                    arguments 'APP_PLATFORM=android-21',
+                            'APP_STL=c++_shared',
+                            'NDK_TOOLCHAIN_VERSION=clang',
+                            "GENERATED_SRC_DIR=${appProject.buildDir}/generated/source",
+                            "PROJECT_BUILD_DIR=${appProject.buildDir}",
+                            "REACT_ANDROID_DIR=${findNodeModulePath(appProject.rootDir, 'react-native') ?: '../node_modules/react-native/'}/ReactAndroid",
+                            "REACT_ANDROID_BUILD_DIR=${findNodeModulePath(appProject.rootDir, 'react-native') ?: '../node_modules/react-native/'}/ReactAndroid/build"
+                    cFlags '-Wall', '-Werror', '-fexceptions', '-frtti', '-DWITH_INSPECTOR=1'
+                    cppFlags '-std=c++17'
+                    targets 'rngesturehandler_modules'
                 }
             }
         }
+
+        ndk {
+            abiFilters(*reactNativeArchitectures())
+        }
     }
 
     compileOptions {
@@ -148,8 +116,8 @@ android {
 
     if (isNewArchitectureEnabled()) {
         externalNativeBuild {
-            cmake {
-                path "src/main/jni/CMakeLists.txt"
+            ndkBuild {
+                path 'src/main/jni/Android.mk'
             }
         }
     }
@@ -157,9 +125,9 @@ android {
     packagingOptions {
         // For some reason gradle only complains about the duplicated version of libreact_render libraries
         // while there are more libraries copied in intermediates folder of the lib build directory, we exclude
-        // only the ones that make the build fail (ideally we should only include libgesturehandler but we
+        // only the ones that make the build fail (ideally we should only include librngesturehandler_modules but we
         // are only allowed to specify exclude patterns)
-        exclude "**/libreact_render*.so"
+        exclude '**/libreact_render*.so'
     }
 
     // Include "lib/" as sources, unfortunately react-native link can't handle
@@ -201,37 +169,22 @@ dependencies {
 
     if (shouldUseCommonInterfaceFromReanimated()) {
         // Include Reanimated as dependency to load the common interface
-        implementation (project(':react-native-reanimated')) {
+        implementation(project(':react-native-reanimated')) {
             exclude group:'com.facebook.fbjni' // resolves "Duplicate class com.facebook.jni.CppException"
         }
     }
 
     implementation 'androidx.appcompat:appcompat:1.2.0'
-    implementation "androidx.core:core-ktx:1.6.0"
+    implementation 'androidx.core:core-ktx:1.6.0'
     implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
 }
 
 if (isNewArchitectureEnabled()) {
     react {
-        reactNativeDir = rootProject.file(findNodeModulePath(rootProject.rootDir, "react-native") ?: "../node_modules/react-native/")
-        jsRootDir = file("../src/fabric/")
-        codegenDir = rootProject.file(findNodeModulePath(rootProject.rootDir, "react-native-codegen") ?: "../node_modules/react-native-codegen/")
-        libraryName = "rngesturehandler"
-        codegenJavaPackageName = "com.swmansion.gesturehandler"
-    }
-
-    // Resolves "LOCAL_SRC_FILES points to a missing file, Check that libfb.so exists or that its path is correct".
-    tasks.whenTaskAdded { task ->
-        if (task.name.contains("configureCMakeDebug")) {
-            rootProject.getTasksByName("packageReactNdkDebugLibs", true).forEach {
-                task.dependsOn(it)
-            }
-        }
-        // We want to add a dependency for both configureCMakeRelease and configureCMakeRelWithDebInfo
-        if (task.name.contains("configureCMakeRel")) {
-            rootProject.getTasksByName("packageReactNdkReleaseLibs", true).forEach {
-                task.dependsOn(it)
-            }
-        }
+        reactNativeDir = rootProject.file(findNodeModulePath(rootProject.rootDir, 'react-native') ?: '../node_modules/react-native/')
+        jsRootDir = file('../src/fabric/')
+        codegenDir = rootProject.file(findNodeModulePath(rootProject.rootDir, 'react-native-codegen') ?: '../node_modules/react-native-codegen/')
+        libraryName = 'rngesturehandler'
+        codegenJavaPackageName = 'com.swmansion.gesturehandler'
     }
 }
